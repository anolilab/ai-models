/**
 * Interface for provider configuration
 */
export interface ProviderConfig {
    doc?: string; // Documentation URL
    env?: string[]; // Environment variables required
    modelsDevId?: string; // ID from models.dev API
    name: string;
    npm?: string; // NPM package name
    output: string;
    transformer: string;
}

/**
 * Maps provider names to their corresponding LobeHub icon names
 * Uses lowercase provider names for consistency
 */
export const PROVIDER_ICON_MAP: Record<string, string> = {
    "agentica-org": "agentica-org",
    "aion-labs": "aionlabs",
    // Additional providers with LobeHub icons
    aionlabs: "aionlabs",
    alfredpros: "alfredpros",
    alibaba: "alibaba",
    alpindale: "alpindale",
    amazon: "bedrock",
    "amazon-bedrock": "bedrock",
    "amazon bedrock": "bedrock",
    "anthracite-org": "anthracite-org",
    // Primary providers with LobeHub icons
    anthropic: "anthropic",
    "arcee-ai": "arcee-ai",
    arliai: "arliai",
    atlascloud: "atlascloud",
    atoma: "atoma",
    avian: "avian",
    azure: "azure",
    "azure-open-ai": "azure",
    "azure openai": "azure",
    baidu: "baidu",
    bytedance: "bytedance",
    cerebras: "cerebras",
    chutes: "chutes",
    claude: "anthropic",
    cloudflare: "cloudflare",
    "cloudflare workers": "cloudflare",
    "cloudflare workers ai": "cloudflare",
    cognitivecomputations: "cognitive-computations",
    // Additional providers with LobeHub icons
    cohere: "cohere",
    crusoe: "crusoe",
    "deep-infra": "deepinfra",
    "deep-seek": "deepseek",
    "deep infra": "deepinfra",
    deepinfra: "deepinfra",
    deepseek: "deepseek",
    eleutherai: "eleutherai",
    enfer: "enfer",
    featherless: "featherless",
    "featherless-ai": "featherless",
    fireworks: "fireworks",
    "fireworks-ai": "fireworks",
    "fireworks ai": "fireworks",
    friendli: "friendli",
    "git-hub-copilot": "githubcopilot",
    "git-hub-models": "github",
    github: "github",
    "github copilot": "githubcopilot",

    "github models": "github",
    gmicloud: "gmicloud",
    google: "google",
    "google-vertex": "vertexai",
    "google-vertex-partner": "vertexai",
    "google partner": "google",
    "google vertex": "vertexai",
    "google vertex ai21 labs": "vertexai",
    "google vertex anthropic": "vertexai",
    "google vertex claude": "vertexai",
    "google vertex mistral ai": "vertexai",
    grok: "grok",
    groq: "groq",
    gryphe: "gryphe",
    "hugging-face": "huggingface",
    huggingface: "huggingface",
    "hugging face": "huggingface",
    hyperbolic: "hyperbolic",
    inception: "inception",
    inference: "inference",
    inferencenet: "inferencenet",
    infermatic: "infermatic",
    inflection: "inflection",
    kluster: "kluster",
    lambda: "lambda",
    liquid: "liquid",
    luma: "luma",
    mancer: "mancer",
    meta: "meta",
    "meta-llama": "meta",
    miatral: "miatral",
    microsoft: "microsoft",
    minimax: "minimax",
    mistral: "mistral",
    mistralai: "mistral",
    "mistral ai": "mistral",
    modelscope: "modelscope",
    "moonshot-ai": "moonshot",
    // Additional providers with LobeHub icons
    moonshotai: "moonshot",
    morph: "morph",
    ncompass: "ncompass",
    nebius: "nebius",
    neversleep: "neversleep",
    nineteen: "nineteen",
    nothingiisreal: "nothing-is-real",

    nousresearch: "nousresearch",
    novita: "novita",
    nscale: "nscale",
    nvidia: "nvidia",
    ollama: "ollama",
    "open-ai": "openai",
    "open-router": "openrouter",
    openai: "openai",
    opengvlab: "opengvlab",
    openinference: "openinference",
    openrouter: "openrouter",
    parasail: "parasail",
    perplexity: "perplexity",
    phala: "phala",
    pygmalionai: "pygmalion-ai",
    qwen: "qwen",
    raifle: "raifle",
    rekaai: "reka-ai",
    requesty: "requesty",
    sambanova: "sambanova",
    sao10k: "sao10k",
    sarvamai: "sarvam-ai",
    scb10x: "scb10x",
    "shisa-ai": "shisa-ai",
    sophosympatheia: "sophosympatheia",
    "stability ai": "stability",
    switchpoint: "switchpoint",

    targon: "targon",
    tencent: "tencent",
    thedrummer: "the-drummer",
    thudm: "thudm",
    tngtech: "tngtech",
    together: "together",
    "together-ai": "together",
    togetherai: "together",
    "together ai": "together",
    ubicloud: "ubicloud",
    undi95: "undi95",
    upstage: "upstage",
    v0: "v0",
    venice: "venice",
    vercel: "vercel",
    vertexai: "google",
    wandb: "weights & biases",
    "weights & biases": "weights & biases",
    "weights-biases": "weights & biases",
    writer: "writer",
    "x-ai": "xai",
    xai: "xai",
    "z-ai": "z-ai",
    zai: "z-ai",
    // Additional missing providers
    "friendli-ai": "friendli",
    replicate: "replicate",
    baseten: "baseten",
    databricks: "databricks",
    snowflake: "snowflake",
    gmi: "gmi",
    siliconflow: "siliconflow",
    ai21: "ai21",
    "ai21-labs": "ai21",
};

/**
 * Maps directory names to proper brand names
 */
export const BRAND_NAME_MAP: Record<string, string> = {
    // New providers from models.dev API
    alibaba: "Alibaba",
    "amazon-bedrock": "Amazon Bedrock",
    anthropic: "Anthropic",
    azure: "Azure OpenAI",
    cloudflare: "Cloudflare",
    deepinfra: "Deep Infra",
    deepseek: "DeepSeek",
    "fireworks-ai": "Fireworks AI",
    "github-copilot": "GitHub Copilot",
    "github-models": "GitHub Models",
    google: "Google",
    "google-vertex": "Google Vertex",
    "google-vertex-partner": "Google Partner",
    groq: "Groq",
    huggingface: "Hugging Face",
    inference: "Inference",
    llama: "Meta",
    mistral: "Mistral",
    modelscope: "ModelScope",
    morph: "Morph",
    openai: "OpenAI",
    openrouter: "OpenRouter",
    requesty: "Requesty",
    togetherai: "Together AI",
    upstage: "Upstage",
    v0: "V0",
    venice: "Venice",
    vercel: "Vercel",
    "weights-biases": "Weights & Biases",
    xai: "XAI",
    // Additional missing providers
    hyperbolic: "Hyperbolic",
    friendli: "FriendliAI",
    perplexity: "Perplexity",
    lambda: "Lambda",
    cohere: "Cohere",
    simplismart: "Simplismart",
    replicate: "Replicate",
    nebius: "Nebius",
    minimax: "MiniMax",
    "moonshot-ai": "Moonshot AI",
    reka: "Reka AI",
    baseten: "Baseten",
    databricks: "Databricks",
    snowflake: "Snowflake",
    sambanova: "SambaNova",
    parasail: "Parasail",
    gmi: "GMI",
    siliconflow: "SiliconFlow",
    novita: "Novita",
    ai21: "AI21 Labs",
};

/**
 * Provider configurations for downloading and transforming provider data
 * Updated with information from models.dev API
 */
export const PROVIDERS_CONFIG: ProviderConfig[] = [
    {
        doc: "https://openrouter.ai/docs",
        env: ["OPENROUTER_API_KEY"],
        modelsDevId: "openrouter",
        name: "OpenRouter",
        npm: "@ai-sdk/openrouter",
        output: "openrouter",
        transformer: "./transformers/openrouter.ts",
    },
    {
        doc: "https://sdk.vercel.ai/docs",
        env: ["VERCEL_AI_API_KEY"],
        modelsDevId: "vercel",
        name: "VercelGateway",
        npm: "@ai-sdk/vercel",
        output: "vercel",
        transformer: "./transformers/vercel.ts",
    },
    {
        doc: "https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html",
        env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"],
        modelsDevId: "amazon-bedrock",
        name: "Amazon Bedrock",
        npm: "@ai-sdk/aws-bedrock",
        output: "amazon-bedrock",
        transformer: "./transformers/bedrock.ts",
    },
    {
        doc: "https://docs.anthropic.com/en/docs/about-claude/models",
        env: ["ANTHROPIC_API_KEY"],
        modelsDevId: "anthropic",
        name: "Anthropic",
        npm: "@ai-sdk/anthropic",
        output: "anthropic",
        transformer: "./transformers/anthropic.ts",
    },
    {
        doc: "https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models",
        env: ["AZURE_OPENAI_API_KEY", "AZURE_OPENAI_ENDPOINT"],
        modelsDevId: "azure-openai",
        name: "Azure OpenAI",
        npm: "@ai-sdk/azure-openai",
        output: "azure",
        transformer: "./transformers/azure.ts",
    },
    {
        doc: "https://api-docs.deepseek.com/quick_start/pricing",
        env: ["DEEPSEEK_API_KEY"],
        modelsDevId: "deepseek",
        name: "DeepSeek",
        npm: "@ai-sdk/deepseek",
        output: "deepseek",
        transformer: "./transformers/deepseek.ts",
    },
    {
        doc: "https://docs.github.com/en/copilot/reference/ai-models/supported-models",
        env: ["GITHUB_TOKEN"],
        modelsDevId: "github-copilot",
        name: "GitHub Copilot",
        npm: "@ai-sdk/github-copilot",
        output: "github-copilot",
        transformer: "./transformers/github-copilot.ts",
    },
    {
        doc: "https://ai.google.dev/models",
        env: ["GOOGLE_API_KEY"],
        modelsDevId: "google",
        name: "Google",
        npm: "@ai-sdk/google",
        output: "google",
        transformer: "./transformers/google.ts",
    },
    {
        doc: "https://console.groq.com/docs/models",
        env: ["GROQ_API_KEY"],
        modelsDevId: "groq",
        name: "Groq",
        npm: "@ai-sdk/groq",
        output: "groq",
        transformer: "./transformers/groq.ts",
    },
    {
        doc: "https://huggingface.co/docs/api-inference",
        env: ["HUGGINGFACE_API_KEY"],
        modelsDevId: "huggingface",
        name: "Hugging Face",
        npm: "@ai-sdk/huggingface",
        output: "huggingface",
        transformer: "./transformers/huggingface.ts",
    },
    {
        doc: "https://llama.meta.com/llama/",
        env: ["META_API_KEY"],
        modelsDevId: "meta",
        name: "Llama",
        npm: "@ai-sdk/meta",
        output: "llama",
        transformer: "./transformers/llama.ts",
    },
    // New providers from models.dev API
    {
        doc: "https://platform.openai.com/docs/models",
        env: ["OPENAI_API_KEY"],
        modelsDevId: "openai",
        name: "OpenAI",
        npm: "@ai-sdk/openai",
        output: "openai",
        transformer: "./transformers/openai.ts",
    },
    {
        doc: "https://deepinfra.com/models",
        env: ["DEEPINFRA_API_KEY"],
        modelsDevId: "deepinfra",
        name: "Deep Infra",
        npm: "@ai-sdk/deepinfra",
        output: "deepinfra",
        transformer: "./transformers/deepinfra.ts",
    },
    // Additional missing providers from models.dev API
    {
        doc: "https://help.aliyun.com/zh/dashscope/developer-reference/api-details",
        env: ["ALIBABA_API_KEY"],
        modelsDevId: "alibaba",
        name: "Alibaba",
        npm: "@ai-sdk/openai-compatible",
        output: "alibaba",
        transformer: "./transformers/alibaba.ts",
    },
    {
        doc: "https://readme.fireworks.ai/",
        env: ["FIREWORKS_API_KEY"],
        modelsDevId: "fireworks-ai",
        name: "Fireworks AI",
        npm: "@ai-sdk/fireworks",
        output: "fireworks-ai",
        transformer: "./transformers/fireworks-ai.ts",
    },
    {
        doc: "https://docs.github.com/en/github-models",
        env: ["GITHUB_TOKEN"],
        modelsDevId: "github-models",
        name: "GitHub Models",
        npm: "@ai-sdk/openai-compatible",
        output: "github-models",
        transformer: "./transformers/github-models.ts",
    },
    {
        doc: "https://cloud.google.com/vertex-ai/docs/generative-ai",
        env: ["GOOGLE_VERTEX_PROJECT", "GOOGLE_VERTEX_LOCATION", "GOOGLE_APPLICATION_CREDENTIALS"],
        modelsDevId: "google-vertex",
        name: "Google Vertex",
        npm: "@ai-sdk/google-vertex",
        output: "google-vertex",
        transformer: "./transformers/google-vertex.ts",
    },
    {
        doc: "https://cloud.google.com/vertex-ai/generative-ai/docs/partner-models",
        env: ["GOOGLE_VERTEX_PROJECT", "GOOGLE_VERTEX_LOCATION", "GOOGLE_APPLICATION_CREDENTIALS"],
        modelsDevId: "google-vertex-partner",
        name: "Google Partner",
        npm: "@ai-sdk/google-vertex",
        output: "google-vertex-partner",
        transformer: "./transformers/google-partner.ts",
    },
    {
        doc: "https://inference.net/models",
        env: ["INFERENCE_API_KEY"],
        modelsDevId: "inference",
        name: "Inference",
        npm: "@ai-sdk/openai-compatible",
        output: "inference",
        transformer: "./transformers/inference.ts",
    },
    {
        doc: "https://docs.mistral.ai/getting-started/models/",
        env: ["MISTRAL_API_KEY"],
        modelsDevId: "mistral",
        name: "Mistral",
        npm: "@ai-sdk/mistral",
        output: "mistral",
        transformer: "./transformers/mistral.ts",
    },
    {
        doc: "https://docs.morph.ai/",
        env: ["MORPH_API_KEY"],
        modelsDevId: "morph",
        name: "Morph",
        npm: "@ai-sdk/morph",
        output: "morph",
        transformer: "./transformers/morph.ts",
    },
    {
        doc: "https://requesty.ai/solution/llm-routing/models",
        env: ["REQUESTY_API_KEY"],
        modelsDevId: "requesty",
        name: "Requesty",
        npm: "@requesty/ai-sdk",
        output: "requesty",
        transformer: "./transformers/requesty.ts",
    },
    {
        doc: "https://docs.together.ai/docs/serverless-models",
        env: ["TOGETHER_API_KEY"],
        modelsDevId: "togetherai",
        name: "Together AI",
        npm: "@ai-sdk/togetherai",
        output: "togetherai",
        transformer: "./transformers/togetherai.ts",
    },
    {
        doc: "https://docs.upstage.ai/",
        env: ["UPSTAGE_API_KEY"],
        modelsDevId: "upstage",
        name: "Upstage",
        npm: "@ai-sdk/upstage",
        output: "upstage",
        transformer: "./transformers/upstage.ts",
    },
    {
        doc: "https://v0.dev/docs",
        env: ["V0_API_KEY"],
        modelsDevId: "v0",
        name: "V0",
        npm: "@ai-sdk/v0",
        output: "v0",
        transformer: "./transformers/v0.ts",
    },
    {
        doc: "https://docs.venice.ai/",
        env: ["VENICE_API_KEY"],
        modelsDevId: "venice",
        name: "Venice",
        npm: "@ai-sdk/venice",
        output: "venice",
        transformer: "./transformers/venice.ts",
    },
    {
        doc: "https://docs.x.ai/",
        env: ["XAI_API_KEY"],
        modelsDevId: "xai",
        name: "XAI",
        npm: "@ai-sdk/xai",
        output: "xai",
        transformer: "./transformers/xai.ts",
    },
    {
        doc: "https://modelscope.cn/docs/model-service/API-Inference/intro",
        env: ["MODELSCOPE_API_KEY"],
        modelsDevId: "modelscope",
        name: "ModelScope",
        npm: "@ai-sdk/openai-compatible",
        output: "modelscope",
        transformer: "./transformers/modelscope.ts",
    },
    {
        doc: "https://developers.cloudflare.com/workers-ai/models",
        env: ["CLOUDFLARE_API_TOKEN"],
        name: "Cloudflare",
        npm: "@ai-sdk/cloudflare",
        output: "cloudflare",
        transformer: "./transformers/cloudflare.ts",
    },
    {
        doc: "https://weave-docs.wandb.ai/guides/integrations/inference/",
        env: ["WANDB_API_KEY"],
        name: "Weights & Biases",
        npm: "@ai-sdk/openai-compatible",
        output: "weights-biases",
        transformer: "./transformers/weights-biases.ts",
    },
    {
        doc: "https://inference-docs.cerebras.ai/models/overview",
        env: ["CEREBRAS_API_KEY"],
        name: "Cerebras",
        npm: "@ai-sdk/cerebras",
        output: "cerebras",
        transformer: "./transformers/cerebras.ts",
    },
    {
        doc: "https://llm.chutes.ai/v1/models",
        env: ["CHUTES_API_KEY"],
        name: "Chutes",
        npm: "@ai-sdk/openai-compatible",
        output: "chutes",
        transformer: "./transformers/chutes.ts",
    },
    {
        doc: "https://platform.inceptionlabs.ai/docs",
        env: ["INCEPTION_API_KEY"],
        modelsDevId: "inception",
        name: "Inception",
        npm: "@ai-sdk/openai-compatible",
        output: "inception",
        transformer: "./transformers/inception.ts",
    },
    // Additional missing providers
    {
        doc: "https://hyperbolic.ai/docs",
        env: ["HYPERBOLIC_API_KEY"],
        name: "Hyperbolic",
        npm: "@ai-sdk/openai-compatible",
        output: "hyperbolic",
        transformer: "./transformers/hyperbolic.ts",
    },
    {
        doc: "https://docs.friendli.ai/",
        env: ["FRIENDLI_API_KEY"],
        name: "FriendliAI",
        npm: "@ai-sdk/friendli",
        output: "friendli",
        transformer: "./transformers/friendli.ts",
    },
    {
        doc: "https://docs.perplexity.ai/",
        env: ["PERPLEXITY_API_KEY"],
        name: "Perplexity",
        npm: "@ai-sdk/perplexity",
        output: "perplexity",
        transformer: "./transformers/perplexity.ts",
    },
    {
        doc: "https://docs.lambda.com/",
        env: ["LAMBDA_API_KEY"],
        name: "Lambda",
        npm: "@ai-sdk/openai-compatible",
        output: "lambda",
        transformer: "./transformers/lambda.ts",
    },
    {
        doc: "https://docs.cohere.com/",
        env: ["COHERE_API_KEY"],
        name: "Cohere",
        npm: "@ai-sdk/cohere",
        output: "cohere",
        transformer: "./transformers/cohere.ts",
    },
    {
        doc: "https://simplismart.ai/docs",
        env: ["SIMPLISMART_API_KEY"],
        name: "Simplismart",
        npm: "@ai-sdk/openai-compatible",
        output: "simplismart",
        transformer: "./transformers/simplismart.ts",
    },
    {
        doc: "https://replicate.com/docs",
        env: ["REPLICATE_API_TOKEN"],
        name: "Replicate",
        npm: "@ai-sdk/replicate",
        output: "replicate",
        transformer: "./transformers/replicate.ts",
    },
    {
        doc: "https://nebius.com/docs",
        env: ["NEBIUS_API_KEY"],
        name: "Nebius",
        npm: "@ai-sdk/openai-compatible",
        output: "nebius",
        transformer: "./transformers/nebius.ts",
    },
    {
        doc: "https://platform.minimax.chat/docs",
        env: ["MINIMAX_API_KEY"],
        name: "MiniMax",
        npm: "@ai-sdk/minimax",
        output: "minimax",
        transformer: "./transformers/minimax.ts",
    },
    {
        doc: "https://platform.moonshot.cn/docs",
        env: ["MOONSHOT_API_KEY"],
        name: "Moonshot AI",
        npm: "@ai-sdk/moonshot",
        output: "moonshot",
        transformer: "./transformers/moonshot.ts",
    },
    {
        doc: "https://docs.reka.ai/",
        env: ["REKA_API_KEY"],
        name: "Reka AI",
        npm: "@ai-sdk/reka",
        output: "reka",
        transformer: "./transformers/reka.ts",
    },
    {
        doc: "https://docs.baseten.co/",
        env: ["BASETEN_API_KEY"],
        name: "Baseten",
        npm: "@ai-sdk/baseten",
        output: "baseten",
        transformer: "./transformers/baseten.ts",
    },
    {
        doc: "https://docs.databricks.com/",
        env: ["DATABRICKS_API_KEY", "DATABRICKS_HOST"],
        name: "Databricks",
        npm: "@ai-sdk/databricks",
        output: "databricks",
        transformer: "./transformers/databricks.ts",
    },
    {
        doc: "https://docs.snowflake.com/",
        env: ["SNOWFLAKE_ACCOUNT", "SNOWFLAKE_USERNAME", "SNOWFLAKE_PASSWORD"],
        name: "Snowflake",
        npm: "@ai-sdk/snowflake",
        output: "snowflake",
        transformer: "./transformers/snowflake.ts",
    },
    {
        doc: "https://docs.sambanova.ai/",
        env: ["SAMBANOVA_API_KEY"],
        name: "SambaNova",
        npm: "@ai-sdk/openai-compatible",
        output: "sambanova",
        transformer: "./transformers/sambanova.ts",
    },
    {
        doc: "https://docs.parasail.ai/",
        env: ["PARASAIL_API_KEY"],
        name: "Parasail",
        npm: "@ai-sdk/openai-compatible",
        output: "parasail",
        transformer: "./transformers/parasail.ts",
    },
    {
        doc: "https://gmi.ai/docs",
        env: ["GMI_API_KEY"],
        name: "GMI",
        npm: "@ai-sdk/openai-compatible",
        output: "gmi",
        transformer: "./transformers/gmi.ts",
    },
    {
        doc: "https://siliconflow.com/docs",
        env: ["SILICONFLOW_API_KEY"],
        name: "SiliconFlow",
        npm: "@ai-sdk/openai-compatible",
        output: "siliconflow",
        transformer: "./transformers/siliconflow.ts",
    },
    {
        doc: "https://novita.ai/docs",
        env: ["NOVITA_API_KEY"],
        name: "Novita",
        npm: "@ai-sdk/openai-compatible",
        output: "novita",
        transformer: "./transformers/novita.ts",
    },
    {
        doc: "https://docs.ai21.com/",
        env: ["AI21_API_KEY"],
        name: "AI21 Labs",
        npm: "@ai-sdk/ai21",
        output: "ai21",
        transformer: "./transformers/ai21.ts",
    },
];
